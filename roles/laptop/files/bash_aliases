# aliases
alias vim='nvim -p '

alias ber='bundle exec rake'
alias bert='bundle exec rake test'
alias bip='bundle install --path=vendor/bundle'

alias isodate='date +"%Y-%m-%dT%H:%M:%S%z"'

alias tf='terraform '
alias tfpls='tf plan | landscape; say "terraform plan finished"'
alias charm='pycharm '

alias superlint='docker run -e RUN_LOCAL=true -v $(pwd):/tmp/lint github/super-linter'

alias aws-unassume='unset AWS_PROFILE AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_DEFAULT_REGION'
alias 1p-signin='eval $(op signin my)'

alias sb='sam build -p -c'
alias gai='git add -i '


# Functions
cdt() {
  directory=$(git rev-parse --show-cdup --no-revs HEAD)
  if [ ! -z $directory ]
  then
    cd $directory
  fi
}

garc() {
  directory=$(git rev-parse --show-cdup --no-revs HEAD)
  if [ -z $directory ]
  then
    directory=$(basename $(pwd))
  else
    cd $directory
  fi
  name=$(basename $directory)
  describe=$(git describe --tags 2>/dev/null || git rev-parse --short HEAD)
  git archive --prefix=$name/ -o $name-$describe.tar.gz HEAD ./
}

# search AMIs
find_ami() {
  aws ec2 describe-images --owners amazon --filters "Name=architecture,Values=x86_64" "Name=is-public,Values=true" --query 'Images[*].[Description,Name,ImageId]'
}

get_latest_aws_ami() {
  # aws ec2 describe-images --owners amazon --filters "Name=name,Values=amzn*" --query 'sort_by(Images, &CreationDate)[].Name'
  aws ssm get-parameters --names "/aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-x86_64-gp2" --query "Parameters[*].Value" --output text
}

expose_podman_socket() {
  if [[ -S /tmp/podman.sock ]]
  then
    echo 'socket exists, cleaning up'
    # kill $(ps -ef | grep [c]ore@localhost | awk {'print $2'})
    rm -f /tmp/podman.sock
  fi
  echo 'creating socket'
  ssh -i ~/.ssh/podman-machine-default -p $(ps -ef | grep -i [g]vproxy | sed 's/.*ssh-port //') -L'/tmp/podman.sock:/run/user/1000/podman/podman.sock' -N core@localhost &
  # podman machine ssh -L '/tmp/podman.sock:/run/user/1000/podman/podman.sock' -N &
  export DOCKER_HOST=unix:///tmp/podman.sock
  echo 'DOCKER_HOST set'
}

update-p9k-theme() {
  typeset -g POWERLEVEL9K_COLOR_SCHEME="$(dark-notify -e)"
}

assume-role() {
  if [[ -z $1 ]]
  then
    target="alex@shearn89.com"
  else
    target=$1
  fi
  op_data=$(op get item $target)
  role=$(echo $op_data | jq -r '.details.sections[] | select(.fields).fields[] | select(.t=="role").v')
  session_name=$(echo $op_data | jq -r '.details.sections[] | select(.fields).fields[] | select(.t=="session-name").v')
  serial=$(echo $op_data | jq -r '.details.sections[] | select(.fields).fields[] | select(.t=="mfa-serial").v')

  sts_data=$(aws --profile=personal sts assume-role --role-arn ${role} --role-session-name ${session_name} --serial-number ${serial} --token-code $(op get totp ${target}))
  export AWS_PROFILE=$(echo $sts_data | jq -r '.AssumedRoleUser.AssumedRoleId' | awk -F: {'print $2'})
  export AWS_ACCESS_KEY_ID=$(echo $sts_data | jq -r '.Credentials.AccessKeyId')
  export AWS_SECRET_ACCESS_KEY=$(echo $sts_data | jq -r '.Credentials.SecretAccessKey')
  export AWS_SESSION_TOKEN=$(echo $sts_data | jq -r '.Credentials.SessionToken')
  export AWS_DEFAULT_REGION="eu-west-1"
  unset op_data role session_name serial sts_data
}

decode_b64() {
  base64 -d -i $1 -o $1.wav
}

git_prune() {
  git fetch -p && for branch in $(git for-each-ref --format '%(refname) %(upstream:track)' refs/heads | awk '$2 == "[gone]" {sub("refs/heads/", "", $1); print $1}'); do git branch -d $branch; done
}


k8s_debug() {
  if [[ -z $1 ]]
  then
    echo 'must provide context and pod name'
    return
  fi
  if [[ -z $2 ]]
  then
    echo 'must provide pod name to debug'
    return
  fi
  kubectl --context=$1 debug $2 -it --image=nicolaka/netshoot
}

timezsh() {
  shell=${1-$SHELL}
  for i in $(seq 1 10); do /usr/bin/time $shell -i -c exit; done
}

alias kc="kubectl config use-context "
alias k9s='k9s --readonly '
alias k='kubectl '
unalias gk 2>/dev/null
alias ls='eza --git --git-repos'
alias grep='rg '

alias tfd='terraform destroy'
alias tfda='terraform destroy --auto-approve'
alias tfg='terraform get'
alias tfi='terraform init'
alias tfiu='terraform init -upgrade'
alias tfp='terraform plan -out=tf.plan'
alias tfa='terraform apply tf.plan'
alias tfip='terraform init && terraform plan -out=tf.plan '
alias tfpa='terraform plan -out=tf.plan && terraform apply tf.plan'
alias tfipa='terraform init && terraform plan -out=tf.plan && terraform apply tf.plan'
alias tfiupa='terraform init -upgrade && terraform plan -out=tf.plan && terraform apply tf.plan'
alias tfiup='terraform init -upgrade && terraform plan -out=tf.plan'

tfpta () {
  TARGETS=""
  for tgt in $@
  do
    TARGETS+="-target=$tgt "
  done
  terraform plan -out=tf.plan $TARGETS
  terraform apply tf.plan
}

alias dorker='docker'

alias sl='spacectl '
alias sllp='spacectl stack local-preview --id $(basename $(pwd))'
alias sl_version='echo -n "0.0.0-pre-$(g rev-parse --short HEAD)" | pbcopy'

alias clear_aws='export AWS_PROFILE=""'

## cool argument alias, e.g. l G -> ls ... | grpe ...
# alias -g G="| grep --color=auto -P"
#
get_default_eks_addon_version() {
  aws eks describe-addon-versions --kubernetes-version=$1 --query='addons[0].addonVersions[?compatibilities[0].defaultVersion==`true`].addonVersion | [0]' --addon-name $2
}
